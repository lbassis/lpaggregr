#+TITLE: lpaggregR
#+AUTHOR: Lucas Mello Schnorr
#+STARTUP: overview indent
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Example Cholesky (full spatial aggregation always)
** With small-scale existing trace
- [X] Existing traces from pjdump
  [[./cholesky_11520_960_starpu_25_3_dmda_1_idcin-2.grenoble.grid5000.fr_2016-08-21_20-49-12.pjdump]]
- [X] Modified script to consider only application tasks
  [[./example_cholesky.R]] You can run it with Rscript.
- [X] Resulting Rplots.pdf will show the temporal aggregation for all values of P.
* Larger case from a previous published article
** Description
Data origin: *Summarizing task-based applications behavior over many
nodes through progression clustering* by Lucas Leandro Nesi, Vin√≠cius
Garcia Pinto, Lucas Mello Schnorr, and Arnaud Legrand accept for
publication in 31st Euromicro International Conference on Parallel,
Distributed, and Network-Based Processing (PDP 2023). The remaining of
the companion is at: https://gitlab.com/lnesi/companion-pdp-2023.
** Download data from
https://zenodo.org/records/7649490
#+begin_src shell :results output :exports both :eval no
wget https://zenodo.org/records/7649490/files/traces.tar.xz
#+end_src
** Uncompact everything
#+begin_src shell :results output :exports both
tar vfxJ traces.tar.xz
#+end_src

** Install StarVZ

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes :eval no
Sys.setenv(NOT_CRAN = 'true')
install.packages("starvz")
#+end_src

** Function: Generate Hierarchy
:PROPERTIES:
:header-args: :tangle read-starvz-export-pjdump-lpaggreg.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:
#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
generate_hierarchy <- function(df) {
  df$Application |>
    select(Node, Resource, ResourceId, ResourceType) |>
    mutate(Node = paste0("n", Node)) |>
    distinct() |>  
    arrange(Node, ResourceType) -> df.hierarchy
  df$Application |>
    select(Start, End) |>
    summarize(Start = min(Start), End = max(End)) -> df.times
  my.start <- df.times$Start
  my.end <- df.times$End
  my.duration <- my.end - my.start

  bind_rows(
                                        # Level-0 (0)
    tibble(Container = "Container",
           Parent = "0",
           Type = "0",
           Start = my.start,
           End = my.end,
           Duration = my.duration,
           Name = "0") |>
    select(Container, Parent, Type, Start, End, Duration, Name)
   ,
                                        # Level-0 (Root)
    tibble(Container = "Container",
           Parent = "0",
           Type = "ROOT",
           Start = my.start,
           End = my.end,
           Duration = my.duration,
           Name = "root") |>
    select(Container, Parent, Type, Start, End, Duration, Name)
   ,
                                        # Level-1 (Node)
    df.hierarchy |>
    select(Node) |>
    distinct() |>
    mutate(Container = "Container",
           Parent = "root",
           Type = "NODE",
           Start = my.start,
           End = my.end,
           Duration = my.duration,
           Name = Node) |>
    select(Container, Parent, Type, Start, End, Duration, Name)
   ,
                                        # Level-2 (Resource Type)
    df.hierarchy |>
    select(Node, ResourceType) |>
    distinct() |>  
    mutate(RT = paste(Node, ResourceType, sep="-")) |>
    mutate(Container = "Container",
           Parent = Node,
           Type = "RT",
           Start = my.start,
           End = my.end,
           Duration = my.duration,
           Name = RT) |>
    select(Container, Parent, Type, Start, End, Duration, Name)
   ,
                                        # Level-3 (Resource)
    df.hierarchy |>
    select(Node, ResourceType, ResourceId) |>
    distinct() |>  
    mutate(RT = paste(Node, ResourceType, sep="-")) |>
    mutate(Container = "Container",
           Parent = RT,
           Type = "RES",
           Start = my.start,
           End = my.end,
           Duration = my.duration,
           Name = ResourceId) |>
    select(Container, Parent, Type, Start, End, Duration, Name)
  )
}
#+end_src

#+RESULTS:

** Function: Read with StarVZ and export for pjdump
:PROPERTIES:
:header-args: :tangle read-starvz-export-pjdump-lpaggreg.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:
#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
read_starvz_export_pjdump <- function(TRACE.base, TRACE.signature) {
  TRACE.dir <- paste0(TRACE.base, "/", TRACE.signature)
  TRACE.pjdump <- paste0(TRACE.signature, ".pjdump")
  options(crayon.enabled=FALSE)
  library(tidyverse)
  library(starvz)
  df <- starvz_read(TRACE.dir)
  df$Application |>
    mutate(Nature = "State") |>
    mutate(Type = "Task") |>
    select(Nature, ResourceId, Type, Start, End, Duration, Depth, Value) |>
    write_csv(TRACE.pjdump, col_names=FALSE)
  # Hierarchy
  generate_hierarchy(df) |>
    write_csv(TRACE.pjdump, append=TRUE, col_names=FALSE)
  # Gantt-chart
  df$config$base_size <- 9
  df$config$st$labels <- "1GPU_per_NODE"
  df$config$st$abe$active <- TRUE
  my.colors <<- starvz:::extract_colors(df$Application, df$Color)  
  st.panel <- panel_st(df, agg_met = "method")
  return(st.panel)
}
#+end_src

#+RESULTS:

** Function: lpaggreg utilization
:PROPERTIES:
:header-args: :tangle read-starvz-export-pjdump-lpaggreg.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:
#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
options(crayon.enabled=FALSE)
library(tidyverse)
library(lpaggregr)
lpaggreg_utilization <- function(TRACE.pjdump) {
  th=0.0001
  #Without hierarchy
  trace <- parsepjdump(TRACE.pjdump)
  micro <- pjdump2micro(trace, 100,"State",FALSE)
  odf <- oaggregate(micro$data, th)
  q.plot <- qualplot(odf)
  #odf$POpt
  list_of_ps <- as.list(unique(odf$Partitions$Parameter, 3))
  str(list_of_ps)
  lapply(list_of_ps[[1]], # apply only for the first one (TODO)
       function(p){
           oplot_stacked_state(omacro(odf$Partitions, micro, p)) +
               coord_cartesian(ylim=c(0,0.0100), xlim=c(0,100)) +
               ggtitle(paste("p:", p, "optimale:", p==odf$POpt)) +
             scale_fill_manual(values = my.colors)
       }) -> z
  return(list(q.plot, z))
}
#+end_src

#+RESULTS:

** List cases in Zenodo URL
:PROPERTIES:
:header-args: :tangle read-starvz-export-pjdump-lpaggreg.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
cases.list <- c(
	"traces/exageo"#,
#	"traces/chameleon_exps/chameleon_simu_vis_2W+DIF__96000__30",
#	"traces/chameleon_exps/chameleon_simu_vis_COMMG__96000__30",
#	"traces/chameleon_exps/chameleon_simu_vis_COMM1N__96000__30",
#	"traces/chameleon_exps/chameleon_simu_vis_N2GPUL__96000__30",
#	"traces/chameleon_exps/chameleon_simu_vis_BASE__96000__30"
  )
cases.list
#+end_src

#+RESULTS:
: [1] "traces/exageo"

** Do for all traces contained in Zenodo
:PROPERTIES:
:header-args: :tangle read-starvz-export-pjdump-lpaggreg.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:
#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
lapply(cases.list, function(ELEMENT) {
    TRACE.signature <- basename(ELEMENT)
    TRACE.dir <- dirname(ELEMENT)
    TRACE.pjdump <- paste0(TRACE.signature, ".pjdump")
    TRACE.pdf <-  paste0(TRACE.signature, ".pdf")
    pdf(file=TRACE.pdf)    
    p <- read_starvz_export_pjdump(TRACE.dir, TRACE.signature)
    print(p)
    p <- lpaggreg_utilization(TRACE.pjdump)
    print(p)
    dev.off()
  }) -> z
#+end_src

* Testing previous functions


#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
ELEMENT <- "traces/exageo"
TRACE.signature <- basename(ELEMENT)
TRACE.dir <- dirname(ELEMENT)
TRACE.pjdump <- paste0(TRACE.signature, ".pjdump")
TRACE.pdf <-  paste0(TRACE.signature, ".pdf")
pdf(file=TRACE.pdf)    
p <- read_starvz_export_pjdump(TRACE.dir, TRACE.signature)
print(p)
#p <- lpaggreg_utilization(TRACE.pjdump)
#print(p)
#dev.off()
#+end_src

#+RESULTS:
| x |
|---|
| 1 |

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
th=0.0001
trace <- parsepjdump(TRACE.pjdump)
micro <- pjdump2micro(trace, 100,"State",FALSE)
odf <- oaggregate(micro$data, th)
q.plot <- qualplot(odf)
#+end_src

#+RESULTS:
|---|

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
hdf<-haggregate(micro$data, micro$hierarchy, th)
#+end_src

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
q.plot
#+end_src

#+RESULTS:
|---|

* Prototyping State+Container
:PROPERTIES:
:header-args: :tangle create-hierarchy.R :tangle-mode (identity #o755) :shebang "#!/usr/bin/Rscript"
:END:

** Function: Read with StarVZ and export for pjdump
#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
read_starvz_export_pjdump <- function(TRACE.base, TRACE.signature) {
  TRACE.dir <- paste0(TRACE.base, "/", TRACE.signature)
  TRACE.pjdump <- paste0(TRACE.signature, ".pjdump")
  options(crayon.enabled=FALSE)
  library(tidyverse)
  library(starvz)
  df <- starvz_read(TRACE.dir)
  df$Application |>
    mutate(Nature = "State") |>
    mutate(Type = "Task") |>
    select(Nature, ResourceId, Type, Start, End, Duration, Depth, Value) |>
    write_csv(TRACE.pjdump, col_names=FALSE)

  # Generate hierarchy
  
  
  # Gantt-chart
  df$config$base_size <- 9
  df$config$st$labels <- "1GPU_per_NODE"
  df$config$st$abe$active <- TRUE
  my.colors <<- starvz:::extract_colors(df$Application, df$Color)  
  st.panel <- panel_st(df, agg_met = "method")
  return(st.panel)
}
#+end_src

#+RESULTS:
** Read

Container, Parent, Type, Start, End, Duration, Name

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
options(crayon.enabled=FALSE)
library(tidyverse)
library(starvz)
TRACE.signature <- "exageo"
TRACE.base <- "traces"
TRACE.dir <- paste0(TRACE.base, "/", TRACE.signature)
TRACE.pjdump <- paste0(TRACE.signature, ".pjdump")
options(crayon.enabled=FALSE)
library(tidyverse)
library(starvz)
df <- starvz_read(TRACE.dir)
df$Application |>
  select(Node, Resource, ResourceId, ResourceType) |>
  mutate(Node = paste0("n", Node)) |>
  distinct() |>  
  arrange(Node, ResourceType) -> df.hierarchy
df$Application |>
  select(Start, End) |>
  summarize(Start = min(Start), End = max(End)) -> df.times
my.start <- df.times$Start
my.end <- df.times$End
my.duration <- my.end - my.start
#+end_src

#+RESULTS:
: Error in library(starvz) : there is no package called ‚Äòstarvz‚Äô
: Error in library(starvz) : there is no package called ‚Äòstarvz‚Äô
: Error in starvz_read(TRACE.dir) : could not find function "starvz_read"
: Error in df$Application : object of type 'closure' is not subsettable
: Error in df$Application : object of type 'closure' is not subsettable
: Error: object 'df.times' not found
: Error: object 'df.times' not found
: Error: object 'my.end' not found

** Level-0 (Root)

Container, Parent, Type, Start, End, Duration, Name

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
tibble(Container = "Container",
       Parent = "0",
       Type = "ROOT",
       Start = my.start,
       End = my.end,
       Duration = my.duration,
       Name = "root") |>
  select(Container, Parent, Type, Start, End, Duration, Name) |>
  write_csv(TRACE.pjdump, col_names=FALSE)
#+end_src

#+RESULTS:

** Level-1 (Node)

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
df.hierarchy |>
  select(Node) |>
  distinct() |>
  mutate(Container = "Container",
         Parent = "root",
         Type = "NODE",
         Start = my.start,
         End = my.end,
         Duration = my.duration,
         Name = Node) |>
  select(Container, Parent, Type, Start, End, Duration, Name) |>
  write_csv(TRACE.pjdump, append=TRUE)
#+end_src

#+RESULTS:
| Container | Parent | Type |         Start |          End |     Duration | Name |
|-----------+--------+------+---------------+--------------+--------------+------|
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n0   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n1   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n2   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n3   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n4   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n5   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n6   |
| Container | root   | NODE | -15794.803421 | 59835.191056 | 75629.994477 | n7   |

** Level-2 (Resource Type)

#+begin_src R :results table :session *R* :exports both :noweb yes :colnames yes
df.hierarchy |>
  select(Node, ResourceType) |>
  distinct() |>  
  mutate(RT = paste(Node, ResourceType, sep="-")) |>
  mutate(Container = "Container",
         Parent = Node,
         Type = "RT",
         Start = my.start,
         End = my.end,
         Duration = my.duration,
         Name = RT) |>
  select(Container, Parent, Type, Start, End, Duration, Name) |>  
  write_csv(TRACE.pjdump, append=TRUE)
#+end_src

#+RESULTS:
| Container | Parent | Type |         Start |          End |     Duration | Name     |
|-----------+--------+------+---------------+--------------+--------------+----------|
| Container | n0     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n0-CPU   |
| Container | n1     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n1-CPU   |
| Container | n2     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n2-CPU   |
| Container | n3     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n3-CPU   |
| Container | n4     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n4-CPU   |
| Container | n5     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n5-CPU   |
| Container | n6     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n6-CPU   |
| Container | n6     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n6-CUDA_ |
| Container | n7     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n7-CPU   |
| Container | n7     | RT   | -15794.803421 | 59835.191056 | 75629.994477 | n7-CUDA_ |

** Level-3 (Resource)

#+begin_src R :results output :session *R* :exports both :noweb yes :colnames yes
df.hierarchy |>
  select(Node, ResourceType, ResourceId) |>
  distinct() |>  
  mutate(RT = paste(Node, ResourceType, sep="-")) |>
  mutate(Container = "Container",
         Parent = RT,
         Type = "RES",
         Start = my.start,
         End = my.end,
         Duration = my.duration,
         Name = ResourceId) |>
  select(Container, Parent, Type, Start, End, Duration, Name) |>  
  write_csv(TRACE.pjdump, append=TRUE)
#+end_src

#+RESULTS:
